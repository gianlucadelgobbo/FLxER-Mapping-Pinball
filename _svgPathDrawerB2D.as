package {	public class svgPathDrawerB2D {				import Box2D.Collision.Shapes.b2CircleShape;		import Box2D.Collision.Shapes.b2PolygonShape;		import Box2D.Common.Math.b2Vec2;		import Box2D.Dynamics.Joints.b2RevoluteJoint;		import Box2D.Dynamics.Joints.b2RevoluteJointDef;		import Box2D.Dynamics.b2Body;		import Box2D.Dynamics.b2BodyDef;		import Box2D.Dynamics.b2FixtureDef;		import Box2D.Dynamics.b2World;				import flash.geom.Point;		import flash.geom.Rectangle;		import flash.xml.XMLNode;				public static const TYPE_TRIANGLE_BOTTOM:int = 0;		public static const TYPE_TRIANGLE_TOP:int = 1;		public static const TYPE_CIRCLE:int = 2;		public static const TYPE_SQUARE:int = 3;		public static const TYPE_BLACK_HOLE:int = 4;				public var touchLocation:Rectangle;		public var selected:Boolean = false;				private var _world:b2World;		private var _type:int;		private var _position:Point;		private var _body:b2Body;		private var _width:int = 32;				public function svgPathDrawerB2D(world:b2World, x, y, xmlMap:XMLNode) {			_world = world;			_type = TYPE_TRIANGLE_BOTTOM;			_position = new Point (x, y);						//touchLocation = new Rectangle(x - _width *0.5, y - _width *0.5, _width, _width);									drawBlock(xmlMap);		}				private function drawBlock (xmlMap):void {			var location:b2Vec2 = Box2DUtils.P2MVector(_position.x, _position.y);						var bodyDef:b2BodyDef;			var bodyFixture:b2FixtureDef;			bodyFixture = new b2FixtureDef();						bodyDef = new b2BodyDef();			bodyDef.type = b2Body.b2_staticBody;			bodyDef.position.Set(location.x, location.y);						var vertices:Array = [];			var bodyShape:b2PolygonShape;											trace("svgPathDrawerB2D "+xmlMap.nodeName);			var forma = xmlMap.attributes.d.substring(1).split("Q");			for (var b=0;b<forma.length-2;b++) {				forma[b] = forma[b].split(",");				trace(forma[b][0]+" "+forma[b][1])				trace("svgPathDrawerB2D "+b);				vertices.push(Box2DUtils.P2MVector(forma[b][0]/3,forma[b][1]/3));				//wall.graphics.curveTo(forma[b][0],forma[b][1],(forma[b][2] ? forma[b][2] : forma[b][0]),(forma[b][3] ? forma[b][3] : forma[b][1]));			}			bodyShape = b2PolygonShape.AsArray(vertices, vertices.length);						bodyFixture.shape = bodyShape;			bodyFixture.restitution = 1;			//bodyFixture.density = 100;			//forma[0] = forma[0].split(",");			//wall.graphics.curveTo(forma[0][0],forma[0][1],(forma[0][2] ? forma[0][2] : forma[0][0]),(forma[0][3] ? forma[0][3] : forma[0][1]));						_body = _world.CreateBody(bodyDef);			_body.CreateFixture(bodyFixture);					}	}}