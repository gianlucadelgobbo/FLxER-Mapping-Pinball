/*package{	import Box2D.Collision.Shapes.b2CircleShape;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Common.Math.b2Vec2;	import Box2D.Dynamics.Joints.b2RevoluteJoint;	import Box2D.Dynamics.Joints.b2RevoluteJointDef;	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Dynamics.b2World;		import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.setTimeout;		public class Control {				public static const TYPE_MAIN_BOTTOM_LEFT:int = 0;		public static const TYPE_MAIN_BOTTOM_RIGHT:int = 1;		public static const TYPE_MAIN_TOP_LEFT:int = 2;		public static const TYPE_MAIN_TOP_RIGHT:int = 3;				public static const TYPE_HORIZONTAL_BOTTOM_LEFT:int = 4;		public static const TYPE_HORIZONTAL_BOTTOM_RIGHT:int = 5;		public static const TYPE_HORIZONTAL_TOP_RIGHT:int = 6;		public static const TYPE_HORIZONTAL_TOP_LEFT:int = 7;				public static const TYPE_VERTICAL_BOTTOM_LEFT:int = 8;		public static const TYPE_VERTICAL_BOTTOM_RIGHT:int = 9;		public static const TYPE_VERTICAL_TOP_LEFT:int = 10;		public static const TYPE_VERTICAL_TOP_RIGHT:int = 11;				public static const FLIPPER1_LENGTH:Number = 44;		public static const FLIPPER_SIDE1:Number = 8;		public static const FLIPPER_SIDE2:Number = 4;		public static const FLIPPER2_LENGTH:Number = 32;				private static const FLIPPER_FORCE:int = 228;						public var joint:b2RevoluteJoint;		public var selected:Boolean = false;		public var touchLocation:Rectangle;				private var _anchor:b2Body;		private var _flipper:b2Body;		private var _world:b2World;		private var _type:int;		private var _position:Point;		private var _force:Number;						public function Control(world:b2World, x:Number, y:Number, d,type:int) {			_world = world;			_type = type;			_position = new Point(x, y);						drawControl();		}				private function drawControl ():void {						var bodyDef:b2BodyDef;			var bodyFixture:b2FixtureDef;						var vertices:Array = [];						vertices.push(Box2DUtils.P2MVector(_position.x, _position.y));			vertices.push(Box2DUtils.P2MVector(_position.x + FLIPPER1_LENGTH, _position.y + (FLIPPER_SIDE1 - FLIPPER_SIDE2)*0.5));			vertices.push(Box2DUtils.P2MVector(_position.x + FLIPPER1_LENGTH, _position.y + FLIPPER_SIDE1 - (FLIPPER_SIDE1 - FLIPPER_SIDE2)*0.5));			vertices.push(Box2DUtils.P2MVector(_position.x, _position.y + FLIPPER_SIDE1));						//create anchor			var anchorLocation:b2Vec2 = Box2DUtils.P2MVector(_position.x + FLIPPER_SIDE1*0.5, _position.y + FLIPPER_SIDE1*0.5);			touchLocation = new Rectangle(_position.x, _position.y, FLIPPER_SIDE1*2, FLIPPER_SIDE1*2); 									bodyDef = new b2BodyDef();			bodyDef.position.Set(anchorLocation.x, anchorLocation.y);			bodyDef.type = b2Body.b2_staticBody;			var circle:b2CircleShape = new b2CircleShape(FLIPPER_SIDE2/Box2DUtils.P2M/4);			*/package{	import Box2D.Collision.Shapes.b2CircleShape;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Common.Math.b2Vec2;	import Box2D.Dynamics.Joints.b2RevoluteJoint;	import Box2D.Dynamics.Joints.b2RevoluteJointDef;	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Dynamics.b2World;		import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.setTimeout;		public class Control {		public static const TYPE_MAIN_BOTTOM_LEFT:int = 0;		public static const TYPE_MAIN_BOTTOM_RIGHT:int = 1;						private var FLIPPER_FORCE:int = 228;						public var joint:b2RevoluteJoint;		public var selected:Boolean = false;		public var touchLocation:Rectangle;				private var _anchor:b2Body;		public var _flipper:b2Body;		private var _world:b2World;		private var _type:int;		private var _position:Point;		private var _force:Number;		private var _ctrl_width;		private var _ctrl_height_small		private var _ctrl_height_big		private var _ctrl_d		public var restitution:Number = 0.8;				public function Control(world:b2World, x:Number, y:Number, d:Number, type:int, r:Number) {			restitution = r;			_world = world;			_type = type;			_ctrl_width = d;			_ctrl_height_small = d/10			_ctrl_height_big = d/8//			FLIPPER_FORCE = FLIPPER_FORCE*_ctrl_width*10000			_ctrl_d = _ctrl_height_big*.9			if (_type == Control.TYPE_MAIN_BOTTOM_RIGHT) {				_position = new Point(x-_ctrl_d, y+_ctrl_d);			} else {				_position = new Point(x+_ctrl_d, y+_ctrl_d);			}			drawControl();		}				private function drawControl ():void {						var bodyDef:b2BodyDef;			var bodyFixture:b2FixtureDef;						var vertices:Array = [];						vertices.push(Box2DUtils.P2MVector(_position.x-(_ctrl_height_big/2), _position.y-(_ctrl_height_big/2)));			vertices.push(Box2DUtils.P2MVector(_position.x-(_ctrl_height_big/2) + _ctrl_width, _position.y-(_ctrl_height_big/2) + (_ctrl_height_big - _ctrl_height_small)*0.5));			vertices.push(Box2DUtils.P2MVector(_position.x-(_ctrl_height_big/2) + _ctrl_width, _position.y-(_ctrl_height_big/2) + _ctrl_height_big - (_ctrl_height_big - _ctrl_height_small)*0.5));			vertices.push(Box2DUtils.P2MVector(_position.x-(_ctrl_height_big/2), _position.y-(_ctrl_height_big/2) + _ctrl_height_big));						//create anchor			var anchorLocation:b2Vec2 = Box2DUtils.P2MVector(_position.x, _position.y);			touchLocation = new Rectangle(_position.x-(_ctrl_height_big/2), _position.y-(_ctrl_height_big/2), _ctrl_width, _ctrl_width); 									bodyDef = new b2BodyDef();			bodyDef.position.Set(anchorLocation.x, anchorLocation.y);			bodyDef.type = b2Body.b2_staticBody;			var circle:b2CircleShape = new b2CircleShape(_ctrl_height_small/400);			bodyFixture = new b2FixtureDef();			bodyFixture.shape = circle;			_anchor = _world.CreateBody(bodyDef);			_anchor.CreateFixture(bodyFixture);									//create flipper			var bodyShape:b2PolygonShape = b2PolygonShape.AsArray(vertices, vertices.length);						bodyFixture = new b2FixtureDef();			bodyDef = new b2BodyDef();			bodyDef.type = b2Body.b2_dynamicBody;			//bodyDef.type = b2Body.b2_staticBody;			bodyDef.allowSleep = false;			switch (_type) {				case Control.TYPE_MAIN_BOTTOM_RIGHT:					bodyDef.userData = {name:"right"};					break;				case Control.TYPE_MAIN_BOTTOM_LEFT:					bodyDef.userData = {name:"left"};					break;			}			bodyFixture.shape = bodyShape;			bodyFixture.density = 10/_ctrl_width;			trace ("bodyFixture.density"+bodyFixture.density);			//bodyFixture.friction = 10;			bodyFixture.restitution = restitution;						_flipper = _world.CreateBody(bodyDef);			_flipper.CreateFixture(bodyFixture);			_flipper.GetFixtureList().SetSensor(true);			setTimeout(function ():void {_flipper.GetFixtureList().SetSensor(false);}, 200);			_flipper.SetBullet(true);			//create joint			var jointDef:b2RevoluteJointDef = new b2RevoluteJointDef();			jointDef.Initialize(_anchor, _flipper, anchorLocation);						switch (_type) {				case Control.TYPE_MAIN_BOTTOM_RIGHT:					jointDef.upperAngle = 230 *  Box2DUtils.DEG_TO_RAD;					jointDef.lowerAngle = 170 * Box2DUtils.DEG_TO_RAD;					jointDef.motorSpeed = -FLIPPER_FORCE;					break;				case Control.TYPE_MAIN_BOTTOM_LEFT:					jointDef.upperAngle = 10 *  Box2DUtils.DEG_TO_RAD;					jointDef.lowerAngle = -60 * Box2DUtils.DEG_TO_RAD;					jointDef.motorSpeed = FLIPPER_FORCE;					break;			}									jointDef.maxMotorTorque = 100.0;			jointDef.enableMotor = true;			jointDef.enableLimit = true;			joint = _world.CreateJoint(jointDef) as b2RevoluteJoint;			_force = joint.GetMotorSpeed();			/*			*/		}				public function reverseMotor ():void {			joint.SetMotorSpeed(joint.GetMotorSpeed() * -1);		}				public function activate ():void {			joint.SetMotorSpeed(_force * -1);		}				public function deActivate ():void {			joint.SetMotorSpeed(_force);		}			}}